Concepts:
1) Single Immutable State Tree: Everything that changes in our Application, whether it is the Data or UI state is contained in a Single Object. We call it State or State Tree.
2) Describing State changes with Actions: 
  State Tree is Read Only. 
  Only way to change it is to dispatch an Action. 
  Action is described in simple Javascript Object.
  Only requirement is it should have a "type" property which will have values like "Increment", "Decrement" etc. 
    It should be of Type String, because String is serealizable.
  Any data which gets into Redux application, gets there by Action.
3) Redux Pure and Impure functions: Pure Functions return same value for the same Input everytime.(they are predictable)
      They do not have any observable Side Effects like Network or Database call or change the DOM.
      They do not modify the values passed to them.
      functions that you are going to write in Redux have to be Pure and you have to be mindful of that.
4) Reducer Function:
Note: UI or View layer is more predictable when it is described as a Pure Function of the Application State.
Reduct complements this concept with another which is
State Mutations in your Applications must be Pure Functions.
Means it should take Previous State, Action as Dispatcher and Return the New State Object. (should not modify the Previous State)
This Functions is called the Reducer.
5) Writing a counter reducer with tests:
